import cv2
import matplotlib.pyplot as plt
img=cv2.imread('car.jpg')
plt.imshow(img)

plt.imshow(img)
# plt.xticks([])
# plt.yticks([])
plt.axis('off')

#give the RGB color
img=cv2.imread('car.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
plt.imshow(img)

#using filter2D
import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('car.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
k1=np.array([[-1,-1,-1,],[-1,8,1],[-1,-1,-1]])
k1output=cv2.filter2D(img,-1,k1)
plt.subplot(1,2,1),plt.imshow(img),plt.axis('off')
plt.subplot(1,2,2),plt.imshow(k1output),plt.axis('off')

import cv2
import matplotlib.pyplot as plt
import numpy as np
img=cv2.imread('car.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
k1=np.ones((6,6),np.float64)/36
k1output=cv2.filter2D(img,-1,k1)
plt.subplot(1,2,1),plt.imshow(img),plt.axis('off')
plt.subplot(1,2,2),plt.imshow(k1output),plt.axis('off')




#image blur
import cv2
import matplotlib.pyplot as plt
import numpy as np

img=cv2.imread('car.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
#box blur
box=cv2.blur(img,(75,75))

#gausian blur
gaus=cv2.GaussianBlur(img,(95,95),0)

#median blur
med=cv2.medianBlur(img,75)

plt.subplot(2,2,1),plt.imshow(img),plt.title('source title')
plt.subplot(2,2,2),plt.imshow(box),plt.title('box blur image ')
plt.subplot(2,2,3),plt.imshow(gaus),plt.title('gaussian blur title')
plt.subplot(2,2,4),plt.imshow(med),plt.title('median blur title')







#image sharping

# import cv2
# import matplotlib.pyplot as plt

# img=cv2.imread('dinosour.jpg')
# img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# sobelx=cv2.Sobel(img,cv2.CV_64F,1,0,10,ksize=5)
# sobely=cv2.Sobel(img,cv2.CV_64F,1,1,10,ksize=5)
# sobel_combined=cv2.magnitude(sobelx,sobely)

# plt.figure(figsize=(12,6))
# plt.subplot(1,4,1),plt.imshow(img),plt.title('source image'),plt.axis('off')
# plt.subplot(1,4,2),plt.imshow(sobelx,cmap='gray'),plt.title('sobel-x'),plt.axis('off')
# plt.subplot(1,4,3),plt.imshow(sobely,cmap='gray'),plt.title('sobel-y'),plt.axis('off')
# plt.subplot(1,4,4),plt.imshow(sobel_combined,cmap='gray'),plt.title('sobel combined'),plt.axis('off')
# plt.tight_layout()
# plt.show()


import cv2
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Read and convert image to grayscale
img = cv2.imread('dinosour.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Step 2: Apply Sobel filters with proper kernel size
sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)  # Horizontal edges
sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)  # Vertical edges

# Step 3: Combine both directions using magnitude
magnitude = cv2.magnitude(sobelx, sobely)
edge_output = cv2.convertScaleAbs(magnitude)

# Step 4: Display results
plt.figure(figsize=(12, 5))
plt.subplot(1, 4, 1), plt.imshow(gray, cmap='gray'), plt.title('Grayscale'), plt.axis('off')
plt.subplot(1, 4, 2), plt.imshow(cv2.convertScaleAbs(sobelx), cmap='gray'), plt.title('Sobel X'), plt.axis('off')
plt.subplot(1, 4, 3), plt.imshow(cv2.convertScaleAbs(sobely), cmap='gray'), plt.title('Sobel Y'), plt.axis('off')
plt.subplot(1, 4, 4), plt.imshow(edge_output, cmap='gray'), plt.title('Edge Detected'), plt.axis('off')
plt.tight_layout()
plt.show()


#Image Sharpening
import cv2
import matplotlib.pyplot as plt
import numpy as np

img=cv2.imread('dinosour.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

#Creating the Kernel
k1=np.array([[-1,-1,-1],[-1,9,-1],[-1,-1,-1]])
k2=np.array([[1,1,1],[1,-7,1],[1,1,1]])
k3=np.array([[0,-1,0],[-1,5,-1],[0,-1,0]])
# k4=np.array([[-1,-1,-1,-1,-1],[-1,-2,-3,-2,-1],[-1,-2,8,-2,-1],[-1,-2,-3,-2,-1],[-1,-1,-1,-1,-1]])/8

#Applyin the kernel
img1=cv2.filter2D(img,-1,k1)
img2=cv2.filter2D(img,-1,k2)
img3=cv2.filter2D(img,-1,k3)
# img4=cv2.filter2D(img,-1,k4)

plt.figure(figsize=(10,5))
plt.subplot(2,3,1),plt.imshow(img),plt.title('Source Image'),plt.axis('off')
plt.subplot(2,3,2),plt.imshow(img1),plt.title('k1'),plt.axis('off')
plt.subplot(2,3,3),plt.imshow(img2),plt.title('k2'),plt.axis('off')
plt.subplot(2,3,4),plt.imshow(img3),plt.title('k3'),plt.axis('off')
# plt.subplot(2,3,5),plt.imshow(img4),plt.title('k4'),plt.axis('off')



#image sharping using GaussianBlur

import cv2
import matplotlib.pyplot as plt
import numpy as np

img = cv2.imread('dinosour.jpg')
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)

gaus=cv2.GaussianBlur(img,(5,5),0)
sharped_img=cv2.addWeighted(img,1.5,gaus,-0.5,0)

plt.subplot(1, 2, 1), plt.imshow(img), plt.title('sorce image'), plt.axis('off')
plt.subplot(1, 2, 2), plt.imshow(sharped_img), plt.title('sharped image'), plt.axis('off')




#image sharping using convertScaleAbs

# # Image Debossing...
# import cv2
# import matplotlib.pyplot as plt
# import numpy as np

# #Image,kernel,octagonal_img?
# img=cv2.imread('dinosour.jpg',cv2.IMREAD_GRAYSCALE)

# #k1=np.array([[-2,-1,0],[-1,1,1],[0,1,2]])
# k1=np.array([[0,-1,-1],[1,0,-1],[1,1,0]])
# k2=np.array([[-1,-1,0],[-1,0,1],[0,1,1]])
# k3=np.array([[0,0,-1],[0,0,0],[1,0,0]])
# k4=np.array([[0,0,1],[0,0,0],[-1,0,0]])

# img1=cv2.filter2D(img,-1,k1)
# img2=cv2.filter2D(img,-1,k2)
# img3=cv2.filter2D(img,-1,k3)
# img4=cv2.filter2D(img,-1,k4)

# plt.subplot(2,3,1),plt.imshow(img,cmap='gray'),plt.title('Source'),plt.axis('off')
# plt.subplot(2,3,2),plt.imshow(img1,cmap='gray'),plt.title('k1'),plt.axis('off')
# plt.subplot(2,3,3),plt.imshow(img2,cmap='gray'),plt.title('k2'),plt.axis('off')
# plt.subplot(2,3,4),plt.imshow(img3,cmap='gray'),plt.title('k3'),plt.axis('off')
# plt.subplot(2,3,5),plt.imshow(img4,cmap='gray'),plt.title('k4'),plt.axis('off')


import cv2
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Load grayscale image
img = cv2.imread('dinosour.jpg', cv2.IMREAD_GRAYSCALE)

# Step 2: Apply Sobel filter in x and y directions
sobel_x = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=3)

# Step 3: Convert results to 8-bit for display
sobel_x_abs = cv2.convertScaleAbs(sobel_x)
sobel_y_abs = cv2.convertScaleAbs(sobel_y)

# Step 4: Combine both directions
sobel_combined = cv2.magnitude(sobel_x, sobel_y)
sobel_combined_abs = cv2.convertScaleAbs(sobel_combined)

# Step 5: Show results
plt.figure(figsize=(12, 6))
plt.subplot(2, 3, 1), plt.imshow(img, cmap='gray'), plt.title('Source'), plt.axis('off')
plt.subplot(2, 3, 2), plt.imshow(sobel_x_abs, cmap='gray'), plt.title('Sobel X'), plt.axis('off')
plt.subplot(2, 3, 3), plt.imshow(sobel_y_abs, cmap='gray'), plt.title('Sobel Y'), plt.axis('off')
plt.subplot(2, 3, 4), plt.imshow(sobel_combined_abs, cmap='gray'), plt.title('Sobel Combined'), plt.axis('off')
plt.tight_layout()
plt.show()
